basePath: /api/v1
definitions:
  models.ActivityRegistration:
    properties:
      id:
        type: integer
      registrationDate:
        type: integer
      userId:
        type: integer
    type: object
  models.BookActivityRegistration:
    properties:
      id:
        type: integer
      internetArchiveId:
        type: string
      registration:
        $ref: '#/definitions/models.ActivityRegistration'
    type: object
  models.DiaryEntry:
    properties:
      content:
        type: string
      id:
        type: integer
      registration:
        $ref: '#/definitions/models.ActivityRegistration'
      title:
        type: string
    type: object
  models.GameActivityRegistration:
    properties:
      gameName:
        type: string
      id:
        type: integer
      registration:
        $ref: '#/definitions/models.ActivityRegistration'
    type: object
  models.HttpError:
    properties:
      description:
        type: string
      status:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/models.UserRole'
      userName:
        type: string
    type: object
  models.UserRole:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Admin
    - Standard
  services.AddBookActivityRegistrationBody:
    properties:
      internetArchiveId:
        type: string
      registrationDate:
        type: integer
      userId:
        type: integer
    required:
    - internetArchiveId
    - registrationDate
    - userId
    type: object
  services.AddGameActivityRegistrationBody:
    properties:
      gameName:
        type: string
      registrationDate:
        type: integer
      userId:
        type: integer
    required:
    - gameName
    - registrationDate
    - userId
    type: object
  services.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  services.SaveDiaryEntryBody:
    properties:
      content:
        type: string
      publishDate:
        type: integer
      title:
        type: string
      userId:
        type: integer
    required:
    - content
    - publishDate
    - title
    - userId
    type: object
  services.TokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  services.UpdateDiaryEntryBody:
    properties:
      content:
        type: string
      publishDate:
        type: integer
      title:
        type: string
    required:
    - content
    - publishDate
    - title
    type: object
  services.UserAuthenticateBody:
    properties:
      email:
        type: string
      providerId:
        type: string
      providerToken:
        type: string
      userName:
        type: string
    required:
    - email
    - providerId
    - providerToken
    - userName
    type: object
  services.UserBody:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API server for the Analock application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Analock API
  version: "1.0"
paths:
  /activityRegistrations/books:
    post:
      consumes:
      - application/json
      description: Create a new book activity registration
      parameters:
      - description: Book activity registration information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.AddBookActivityRegistrationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookActivityRegistration'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Create book activity registration
      tags:
      - activities
  /activityRegistrations/books/user/{id}:
    get:
      consumes:
      - application/json
      description: Get all book activity registrations for a user, optionally filtered
        by date range
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start date timestamp
        in: query
        name: startDate
        type: integer
      - description: End date timestamp
        in: query
        name: endDate
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookActivityRegistration'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Get user book activity registrations
      tags:
      - activities
  /activityRegistrations/games:
    post:
      consumes:
      - application/json
      description: Create a new game activity registration
      parameters:
      - description: Game activity registration information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.AddGameActivityRegistrationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GameActivityRegistration'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Create game activity registration
      tags:
      - activities
  /activityRegistrations/games/user/{id}:
    get:
      consumes:
      - application/json
      description: Get all game activity registrations for a user, optionally filtered
        by date range
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start date timestamp
        in: query
        name: startDate
        type: integer
      - description: End date timestamp
        in: query
        name: endDate
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GameActivityRegistration'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Get user game activity registrations
      tags:
      - activities
  /auth/authenticate:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens
      parameters:
      - description: Authentication request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UserAuthenticateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      summary: Authenticate user
      tags:
      - auth
  /auth/refreshToken:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.HttpError'
      summary: Refresh access token
      tags:
      - auth
  /diaryEntries:
    post:
      consumes:
      - application/json
      description: Create a new diary entry for a user
      parameters:
      - description: Diary entry information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.SaveDiaryEntryBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DiaryEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Create diary entry
      tags:
      - diary
  /diaryEntries/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing diary entry
      parameters:
      - description: Diary entry ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated diary entry information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UpdateDiaryEntryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DiaryEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Update diary entry
      tags:
      - diary
  /diaryEntries/user/{id}:
    get:
      consumes:
      - application/json
      description: Get all diary entries for a user, optionally filtered by date range
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start date timestamp
        in: query
        name: startDate
        type: integer
      - description: End date timestamp
        in: query
        name: endDate
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DiaryEntry'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Get user diary entries
      tags:
      - diary
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.UserBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - users
  /users/{email}:
    get:
      consumes:
      - application/json
      description: Get user information by their email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HttpError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  Bearer Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
